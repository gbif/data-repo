<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.datarepo.persistence.mappers.DataPackageMapper">

  <resultMap id="DATA_PACKAGE_DATA_MAP" type="DataPackage" autoMapping="true">
    <id property="key" column="key" typeHandler="UuidTypeHandler"/>
    <result property="doi" column="doi" typeHandler="DoiTypeHandler"/>
    <result property="title" column="title"/>
    <result property="description" column="description"/>
    <result property="citation" column="citation"/>
    <result property="license" column="license"/>
    <result property="created" column="created" jdbcType="TIMESTAMP"/>
    <result property="modified" column="modified" jdbcType="TIMESTAMP"/>
    <result property="deleted" column="deleted" jdbcType="TIMESTAMP"/>
    <result property="createdBy" column="created_by"/>
    <result property="checksum" column="checksum"/>
    <result property="size" column="size"/>
    <collection property="files" column="key" select="listDataPackageFiles"/>
    <collection property="alternativeIdentifiers" column="key" select="listAlternativeIdentifiers"/>
    <collection property="tags" column="key" select="listTags"/>
    <collection property="creators" column="key" select="listCreators"/>

  </resultMap>

  <select id="getByDOI" resultType="DataPackage" resultMap="DATA_PACKAGE_DATA_MAP">
    SELECT key, doi, title, description, created, modified, deleted, created_by, checksum, size
    FROM data_package
    WHERE doi = #{doi, jdbcType=OTHER, typeHandler=DoiTypeHandler}
  </select>

  <select id="getByKey" resultType="DataPackage" resultMap="DATA_PACKAGE_DATA_MAP">
    SELECT key, doi, title, description, created, modified, deleted, created_by, checksum, size
    FROM data_package
    WHERE key = #{dataPackageKey, jdbcType=OTHER}
  </select>

  <select id="getByAlternativeIdentifier" resultType="DataPackage" resultMap="DATA_PACKAGE_DATA_MAP" parameterType="String">
    SELECT key, doi, title, description, dp.created, modified, deleted, dp.created_by, checksum, size
    FROM data_package dp JOIN alternative_identifier ai ON ai.data_package_key = dp.key
    WHERE ai.identifier = #{identifier, jdbcType=OTHER}
  </select>

  <select id="listDataPackageFiles" resultMap="org.gbif.datarepo.persistence.mappers.DataPackageFileMapper.DATA_PACKAGE_FILE_DATA_MAP">
    SELECT file_name, checksum, size
    FROM data_package_file
    WHERE  data_package_key = #{dataPackageKey, jdbcType=OTHER}
  </select>

  <select id="listAlternativeIdentifiers" resultMap="org.gbif.datarepo.persistence.mappers.AlternativeIdentifierMapper.ALTERNATIVE_IDENTIFIER_MAP">
    SELECT identifier, data_package_key, type, created, created_by
    FROM alternative_identifier
    WHERE data_package_key = #{dataPackageKey, jdbcType=OTHER}
  </select>

  <select id="listTags" resultMap="org.gbif.datarepo.persistence.mappers.TagMapper.TAG_MAP">
    SELECT <include refid="org.gbif.datarepo.persistence.mappers.TagMapper.TAG_FIELDS"/> FROM tag WHERE
    data_package_key = #{_parameter, jdbcType=OTHER}
  </select>

  <select id="listCreators" resultMap="org.gbif.datarepo.persistence.mappers.CreatorMapper.CREATOR_MAP">
    SELECT <include refid="org.gbif.datarepo.persistence.mappers.CreatorMapper.CREATOR_FIELDS"/> FROM creator
    WHERE data_package_key = #{_parameter, jdbcType=OTHER}
  </select>

  <select id="list" resultType="DataPackage" resultMap="DATA_PACKAGE_DATA_MAP" parameterType="map">
    SELECT dp.key, dp.doi, dp.title, dp.description, dp.created, dp.modified, dp.deleted, dp.created_by, dp.checksum, dp.size
    FROM data_package dp<if test="tags != null and !tags.isEmpty()">, tag t</if><if test="query != null" >, plainto_tsquery('english',unaccent(#{query})) AS query</if>
    <where>
      <if test="user != null" >
        AND dp.created_by=#{user,jdbcType=OTHER}
      </if>
      <if test="fromDate != null" >
        AND dp.created <![CDATA[ >= ]]>  #{fromDate,jdbcType=TIMESTAMP}
      </if>
      <if test="toDate !=null" >
        AND dp.created <![CDATA[ < ]]>  #{toDate,jdbcType=TIMESTAMP}
      </if>
      <choose>
        <when test="deleted" >
          AND dp.deleted IS NOT NULL
        </when>
        <otherwise>
          AND dp.deleted IS NULL
        </otherwise>
      </choose>
      <if test="tags != null and !tags.isEmpty()">
        AND t.data_package_key = dp.key AND t.value IN
        <foreach item="item" index="index" collection="tags"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="query !=null" >
        AND query @@ dp.fulltext_search
      </if>
    </where>
    ORDER BY <if test="query != null" >ts_rank_cd(dp.fulltext_search, query) DESC, </if>dp.created DESC, dp.doi
    <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
    </if>
  </select>

  <select id="count" resultType="Long" parameterType="map">
    SELECT count(*)
    FROM data_package dp<if test="tags != null and !tags.isEmpty()">, tag t</if><if test="query != null" >, plainto_tsquery('english',unaccent(#{query})) AS query</if>
    <where>
      <if test="user != null" >
        AND dp.created_by=#{user,jdbcType=OTHER}
      </if>
      <if test="fromDate != null" >
        AND dp.created <![CDATA[ >= ]]>  #{fromDate,jdbcType=TIMESTAMP}
      </if>
      <if test="toDate !=null" >
        AND dp.created <![CDATA[ < ]]>  #{toDate,jdbcType=TIMESTAMP}
      </if>
      <choose>
        <when test="deleted" >
          AND dp.deleted IS NOT NULL
        </when>
        <otherwise>
          AND dp.deleted IS NULL
        </otherwise>
      </choose>
    </where>
    <if test="tags != null and !tags.isEmpty()">
      AND t.data_package_key = dp.key AND t.value IN
      <foreach item="item" index="index" collection="tags"
               open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="query !=null" >
      AND query @@ dp.fulltext_search
    </if>
  </select>

  <insert id="create" parameterType="DataPackage" useGeneratedKeys="false">
    INSERT INTO data_package (key, doi, title, description, created, modified, created_by, modified_by, checksum, size)
    VALUES(#{key, jdbcType=OTHER, typeHandler=UuidTypeHandler}, #{doi, jdbcType=OTHER, typeHandler=DoiTypeHandler}, #{title, jdbcType=OTHER}, #{description, jdbcType=OTHER},
    <choose><when test="created !=null " >#{created, jdbcType=TIMESTAMP}</when><otherwise>now()</otherwise></choose>,
    <choose><when test="modified != null" >#{modified, jdbcType=TIMESTAMP}</when><otherwise>now()</otherwise></choose>,
    #{createdBy, jdbcType=OTHER}, #{createdBy,jdbcType=OTHER}, #{checksum,jdbcType=OTHER}, #{size,jdbcType=OTHER})
  </insert>

  <update id="update" parameterType="DataPackage">
    UPDATE data_package SET
      title = #{title, jdbcType=OTHER},
      description = #{description, jdbcType=OTHER},
      modified = <choose><when test="modified != null" >#{modified, jdbcType=TIMESTAMP}</when><otherwise>now()</otherwise></choose>,
      modified_by = #{createdBy, jdbcType=OTHER},
      checksum = #{checksum, jdbcType=OTHER},
      size = #{size, jdbcType=OTHER}
    WHERE key = #{key, jdbcType=OTHER}
  </update>

  <update id="archive">
    UPDATE data_package SET
      deleted = now()
    WHERE key = #{dataPackageKey, jdbcType=OTHER}
  </update>

  <delete id="delete">
    UPDATE data_package SET
      deleted = now()
    WHERE key = #{dataPackageKey, jdbcType=OTHER} AND deleted IS NULL
  </delete>

</mapper>
