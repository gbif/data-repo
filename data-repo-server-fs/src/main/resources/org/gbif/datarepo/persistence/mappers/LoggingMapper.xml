<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.gbif.datarepo.persistence.mappers.LoggingMapper">

    <resultMap id="LOGGING_EVENT_MAP" type="DBLoggingEvent" autoMapping="true">
      <id property="timestamp" column="timestmp"/>
      <result property="formattedMessage" column="formatted_message"/>
      <result property="loggerName" column="logger_name"/>
      <result property="level" column="level_string"/>
      <result property="threadName" column="thread_name"/>
      <result property="referenceFlag" column="reference_flag"/>
      <result property="arg0" column="arg0"/>
      <result property="arg1" column="arg1"/>
      <result property="arg2" column="arg2"/>
      <result property="arg3" column="arg3"/>
      <result property="callerFilename" column="caller_filename"/>
      <result property="callerClass" column="caller_class"/>
      <result property="callerMethod" column="caller_method"/>
      <result property="callerLine" column="caller_line"/>
      <result property="eventId" column="event_id"/>
      <association property="mdc" column="event_id" select="listMDCs"/>
      <association property="stackTrace" column="event_id" select="listStackTrace"/>
    </resultMap>
    <resultMap id="MDC_ENTRY" type="MDCEntry">
      <constructor>
        <idArg javaType="string" column="mapped_key"/>
        <arg javaType="string" column="mapped_value"/>
      </constructor>
    </resultMap>

    <select id="list" resultType="DBLoggingEvent" resultMap="LOGGING_EVENT_MAP" parameterType="map">
      SELECT timestmp, formatted_message, logger_name, level_string, thread_name, reference_flag, arg0, arg1, arg2,
      arg3, caller_filename, caller_class, caller_method, caller_line, le.event_id event_id
      FROM logging_event le
      <if test="mdc != null and !mdc.isEmpty()" >
        JOIN logging_event_property lep ON lep.event_id = le.event_id AND (lep.mapped_key, lep.mapped_value) IN
        <foreach  index="key" item="value" collection="mdc.entrySet()" open="((" separator="),(" close="))">
         #{key},#{value}
        </foreach>
      </if>
      <where>
        <if test="fromDate != null" >
          <![CDATA[
            AND timestmp >= #{fromDate,jdbcType=OTHER}
          ]]>
        </if>
        <if test="toDate != null" >
          <![CDATA[
            AND timestmp <= #{toDate,jdbcType=OTHER}
          ]]>
        </if>
      </where>
      <if test="page != null" >
      LIMIT #{page.limit} OFFSET #{page.offset}
      </if>
    </select>
    <select id="count" resultType="Long" parameterType="map">
      SELECT count(*) FROM logging_event le
      <if test="mdc != null and !mdc.isEmpty()" >
        JOIN logging_event_property lep ON lep.event_id = le.event_id AND (lep.mapped_key, lep.mapped_value) IN
        <foreach index="key" item="value" collection="mdc.entrySet()" open="((" separator="),(" close="))">
          #{key},#{value}
        </foreach>
      </if>
      <where>
        <if test="fromDate != null" >
          <![CDATA[
          AND timestmp >= #{fromDate,jdbcType=OTHER}
        ]]>
        </if>
        <if test="toDate != null" >
          <![CDATA[
          AND timestmp <= #{toDate,jdbcType=OTHER}
        ]]>
        </if>
      </where>
      <if test="page != null" >
        LIMIT #{page.limit} OFFSET #{page.offset}
      </if>
    </select>

    <select id="listMDCs" resultMap="MDC_ENTRY">
      SELECT mapped_key, mapped_value FROM logging_event_property
      WHERE event_id = #{_parameter, jdbcType=OTHER}
    </select>

    <select id="listStackTrace" resultType="string">
      SELECT trace_line
      FROM logging_event_exception
      WHERE event_id = #{_parameter, jdbcType=OTHER}
      ORDER BY i ASC
    </select>
</mapper>
